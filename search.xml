<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL基础部分]]></title>
    <url>%2F2018%2F07%2F13%2FMySQL1%2F</url>
    <content type="text"><![CDATA[MySQL基础 数据库基础知识数据库的好处1.持久化数据到本地 2.可以实现结构化查询，方便管理 数据库相关概念1、DB：数据库，保存一组有组织的数据的容器 2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据 3、SQL:结构化查询语言，用于和DBMS通信的语言 数据库存储数据的特点1、将数据放到表中，表再放到库中 2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。 3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。 4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性” 5、表中的数据是按行存储的，每一行类似于java中的“对象”。 MySQL的启动与停止在管理员权限的命令行之下1234#启动net start mysql#关闭net stop mysql MySQL的常见命令12345678910111213141516171819202122231.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名( 列名 列类型, 列名 列类型， 。。。);6.查看表结构desc 表名; 7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V MySQL的语法规范​1.不区分大小写,但建议关键字大写，表名、列名小写 2.每条命令最好用分号结尾 3.每条命令根据需要，可以进行缩进 或换行 4.注释 单行注释：#注释文字 单行注释：-- 注释文字 多行注释：/* 注释文字 */ SQL的语言分类​DQL（Data Query Language）：数据查询语言 select DML(Data Manipulate Language):数据操作语言 insert 、update、delete DDL（Data Define Languge）：数据定义语言 create、drop、alter TCL（Transaction Control Language）：事务控制语言 commit、rollback DQL语言的学习（数据查询语句）基础查询语法： SELECT 要查询的东西 【FROM 表名】; 类似于Java中 :System.out.println(要打印的东西); 特点： ①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在 ② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数 条件查询条件查询：根据条件过滤原始表的数据，查询到想要的数据 语法： 123456select 要查询的字段|表达式|常量值|函数from 表where 条件 ; 一、条件表达式123示例：salary&gt;10000条件运算符：&gt; &lt; &gt;= &lt;= = != &lt;&gt; 二、逻辑表达式1示例：salary&gt;10000 &amp;&amp; salary&lt;20000 逻辑运算符： and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false or(||)：两个条件只要有一个成立，结果为true，否则为false not(!)：如果条件成立，则not后为false，否则为true 三、模糊查询1示例：last_name like 'a%' 排序查询12345678语法：select 要查询的东西from 表where 条件 order by 排序的字段|表达式|函数|别名 【asc|desc】 常见函数单行函数1、字符函数123456789101112concat拼接substr截取子串upper转换成大写lower转换成小写trim去前后指定的空格和字符ltrim去左边空格rtrim去右边空格replace替换lpad左填充rpad右填充instr返回子串第一次出现的索引length 获取字节个数 2、数学函数123456round 四舍五入rand 随机数floor向下取整ceil向上取整mod取余truncate截断 3、日期函数12345now当前系统日期+时间curdate当前系统日期curtime当前系统时间str_to_date 将字符转换成日期date_format将日期转换成字符 4、流程控制函数1234if 处理双分支case语句 处理多分支 情况1：处理等值判断 情况2：处理条件判断 5、其他函数123version版本database当前库user当前连接用户 组函数123456789101112131415sum 求和max 最大值min 最小值avg 平均值count 计数特点：1、以上五个组函数都忽略null值，除了count(*)2、sum和avg一般用于处理数值型 max、min、count可以处理任何数据类型3、都可以搭配distinct使用，用于统计去重后的结果4、count的参数可以支持： 字段、*、常量值，一般放1 建议使用 count(*) 高级查询分组查询多表连接查询子查询分页查询联合查询DML语言查询插入修改删除]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring注解驱动开发]]></title>
    <url>%2F2018%2F07%2F12%2Fspring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[spring注解驱动开发 正文 自我介绍 谈项目 响应式–栅格系统 集群-高可用那个 （）高可用怎么做负债均衡zookeper]]></content>
      <categories>
        <category>spring</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[NodeJs搭建过程]]></title>
    <url>%2F2018%2F07%2F11%2Fnodejs%2F</url>
    <content type="text"><![CDATA[NodeJs环境搭建步骤 第一步：下载nodejs并安装，安装成功后使用如下命令查看是否成功：12node -v npm -v 第二步：配置npm的全局模块的存放路径以及cache的路径我们要先配置npm的全局模块的存放路径以及cache的路径，例如我希望将以上两个文件夹放在NodeJS的主目录下，便在NodeJs下建立”node_global”及”node_cache”两个文件夹 123npm config set prefix "D:\software\nodejs\node_global"以及npm config set cache "D:\software\nodejs\node_cache" 第三步：npm修改源由于不可说原因，npm install时，速度总是不尽如人意，解决办法是修改npm的数据源1npm config set registry https://registry.npm.taobao.org 修改后可以通过这个进行测试1npm config get registry 上面这两个配置都是可以在C:\Users\xliangcf\.npmrc文件下查看，内容如下：123prefix=D:\software\nodejs\node_gobalregistry=https://registry.npm.taobao.org/cache=D:\software\nodejs\node_cache 第四步：修改path路径进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入：1D:\software\nodejs\node_gobal\node_modules“。（ps：这一步相当关键。） 2014.4.19新增：由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为:1D:\software\nodejs\node_gobal\ 要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建博客过程（详细）]]></title>
    <url>%2F2018%2F07%2F11%2Fhexo-blog%2F</url>
    <content type="text"><![CDATA[本章节详细介绍hexo搭建博客的过程 第一步:安装git，并且设置user.name和user.email配置信息：1234git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"生成ssh密钥文件：ssh-keygen -t rsa -C "你的GitHub注册邮箱" 然后直接三个回车即可，默认不需要设置密码然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制打开GitHub_Settings_keys 页面，新建new SSH KeyTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入1ssh git@github.com 安装hexo全局安装hexo1npm install -g hexo-cli 生成hexo博客站点安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。12345$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install#hexo的服务启动，命令hexo server 安装完成后，制定文件夹的目录如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes hexo常用命令123456# 清空缓存hexo clean# 生成静态网页hexo g# 启动hexo服务，默认端口为4000hexo s 安装Next主题进入hexo官网，找到next主题windows的主题安装方法如下：[next主题地址](https://github.com/theme-next/hexo-theme-next）Windows下下载主题：123#在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next Linux的主题链接是：https://github.com/iissnan/hexo-theme-nextlinux下安装方法是：12345$ cd hexo$ ls_config.yml node_modules package.json public scaffolds source themes$ mkdir themes/next$ curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | cut -d '"' -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1 next的相关配置对于整个项目，有一个站点配置文件_config.yml，该文件位于根目录下，对于每个主题，都有一个主题的配置文件_config.yml，位于每个主题的根目录下，在本项目中位于E:\Blog\themes/next目录下： 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。1theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 验证主题首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行,当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。 主题设定在主题配置文件下，找到schemes: 设置语言编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：12#相对应的文件在next主题文件夹下面的language文件夹内language: zh-CN 设置菜单菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。编辑 主题配置文件，修改以下内容： 设定菜单内容对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。123456789menu: home: / || home #about: /about/ || user #tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat NexT 默认的菜单项有（标注！的项表示需要手动创建这个页面）： 设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项：123456789menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料 设定菜单项的图标对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。123456789menu_icons: enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat 设置侧栏略：参考：https://theme-next.iissnan.com/getting-started.html#menu-settings 设置头像编辑 主题配置文件， 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是：1avatar: http://example.com/avatar.png 设置作者昵称以及站点描述编辑 站点配置文件， 设置 author 为你的昵称。编辑 站点配置文件， 设置 description 字段为你的站点描述。站点描述可以是你喜欢的一句签名1234567title: 改变从现在开始subtitle: You are cleverdescription: 热爱生活，勇于前进keywords: author: xliangfchenlanguage: zh-CNtimezone: 添加动态背景打开 next/layout/_layout.swig在之前添加代码(注意不要放在的后面)：123&#123;% if theme.canvas_nest %&#125;&lt;script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 修改主题配置文件，将canvas_nest修改为true1canvas_nest: true 添加更新时间修改语言配置文件/themes/next/languages/zh_Hans.yml，在post下添加以下内容：12post: updated: 更新于 修改主题配置文件/themes/next/_config.yml1updated_at: true 写文章的时候可以直接在文章开头设置更新时间1modified: 启用站点搜索安装hexo-generator-search在站点的根目录下执行以下命令：1npm install hexo-generator-search --save 安装 hexo-generator-searchdb在站点的根目录下执行以下命令：1npm install hexo-generator-searchdb --save 启用搜索编辑站点配置文件，新增以下内容到最后：12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，将local_search下的enable改为true：12local_search: enable: true 上传项目至github做本操作前倾自行注册github账号，并且已经把秘钥生成成功 创建Repository创建的时候需要注意Repository的名字。例如我的Github账号是xliangfchen，那么应该创建的Repository的名字为：xliangfchen.github.io 修改配置文件进入刚刚创建的Repository，复制Repository的连接，例如https://github.com/xliangfchen/xliangfchen.github.io.git 修改站点配置文件12345deploy: type: git repo: https://github.com/xliangfchen/xliangfchen.github.io.git branch: master message: 'updated at:&#123;&#123;now("YYYY-MM-DD HH/mm/ss")&#125;&#125;' 提交代码至github上12hexo generatehexo deploy 在提交代码时可能会出现ERROR Deployer not found: git的错误，此时只需要运行以下命令1npm install --save hexo-deployer-git 将Hexo的源码备份到Github分支里面上传到分支里存储，修改本地的时候先上传存储，再发布。更换电脑的时候再下载下来源文件12345$ git init$ git remote add origin git@github.com:username/username.github.io.git$ git add .$ git commit -m "blog"$ git push origin master:Hexo-Blog 在本地写好博文后，可以先执行：123$ git add .$ git commit -m "blog"$ git push origin master:Hexo-Blog 对hexo相关命令进行解释参考：https://hexo.io/zh-cn/docs/commands.html init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1$ hexo generate 生成静态文件。参数说明：1234-d, --deploy 文件生成后立即部署网站-w, --watch 监视文件变动该命令可以简写为$ hexo g publish12$ hexo publish [layout] &lt;filename&gt;发表草稿。 server123$ hexo server启动服务器。默认情况下，访问网址为： http://localhost:4000/。` 参数说明：123-p, --port 重设端口-s, --static 只使用静态文件-l, --log 启动日记记录，使用覆盖记录格式 deploy12$ hexo deploy部署网站。 参数说明：123-g, --generate 部署之前预先生成静态文件该命令可以简写为：$ hexo d render12$ hexo render &lt;file1&gt; [file2] ...渲染文件。 参数说明：1234-o, --output 设置输出路径migrate$ hexo migrate &lt;type&gt;从其他博客系统 迁移内容。 clean12$ hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list12$ hexo list &lt;type&gt;列出网站资料。 version12$ hexo version显示 Hexo 版本。 对git相关命令进行解释参考：https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93 在现有目录中初始化仓库12#如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入：$ git init 该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交：123$ git add *.c$ git add LICENSE$ git commit -m 'initial project version' 稍后我们再逐一解释每一条指令的意思。 现在，你已经得到了一个实际维护（或者说是跟踪）着若干个文件的 Git 仓库。 克隆现有的仓库如果你想获得一份已经存在了的 Git 仓库的拷贝，比如说，你想为某个开源项目贡献自己的一份力，这时就要用到 git clone 命令。 如果你对其它的 VCS 系统（比如说Subversion）很熟悉，请留心一下你所使用的命令是”clone”而不是”checkout”。 这是 Git 区别于其它版本控制系统的一个重要特性，Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库（虽然可能会丢失某些服务器端的挂钩设置，但是所有版本的数据仍在，详见 在服务器上搭建 Git ）。 克隆仓库的命令格式是 git clone [url] 。 比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：1$ git clone https://github.com/libgit2/libgit2 这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 libgit2 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。 如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以使用如下命令：1$ git clone https://github.com/libgit2/libgit2 mylibgit 这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 `mylibgit。 Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。 在服务器上搭建 Git 将会介绍所有这些协议在服务器端如何配置使用，以及各种方式之间的利弊。]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
